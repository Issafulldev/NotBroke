#!/bin/bash
# Script de d√©ploiement s√©curis√© avec validation

set -e  # Arr√™ter le script en cas d'erreur

echo "üöÄ D√©ploiement NotBroke avec validation de s√©curit√©..."

# Fonction de validation
validate_deployment() {
    echo "üîç Validation du d√©ploiement..."

    # V√©rifier les pr√©requis
    if ! command -v git &> /dev/null; then
        echo "‚ùå Git n'est pas install√©"
        exit 1
    fi

    if ! command -v python3 &> /dev/null; then
        echo "‚ùå Python3 n'est pas install√©"
        exit 1
    fi

    # V√©rifier l'√©tat du d√©p√¥t git
    if [ -n "$(git status --porcelain)" ]; then
        echo "‚ö†Ô∏è  Le d√©p√¥t git contient des changements non committ√©s"
        echo "   Committez vos changements avant le d√©ploiement"
        exit 1
    fi

    # Validation des builds
    echo "üî® Validation des builds..."

    # Backend: v√©rifier la syntaxe Python
    echo "   V√©rification Python..."
    python3 -m py_compile backend/app/main.py backend/app/auth.py backend/app/models.py
    if [ $? -ne 0 ]; then
        echo "‚ùå Erreurs de syntaxe Python d√©tect√©es"
        exit 1
    fi

    # Frontend: v√©rifier le build
    if command -v npm &> /dev/null; then
        echo "   V√©rification du build frontend..."
        cd frontend
        if ! npm run build > /dev/null 2>&1; then
            echo "‚ùå √âchec du build frontend"
            echo "   Corrigez les erreurs TypeScript/ESLint avant le d√©ploiement"
            cd ..
            exit 1
        fi
        cd ..
    fi

    # Validation de s√©curit√©
    echo "üîí Validation de s√©curit√©..."

    # V√©rifier qu'aucun mot de passe par d√©faut n'est pr√©sent
    if grep -r "admin123" . --exclude-dir=.git --exclude-dir=node_modules --exclude="validate-build.sh" --exclude="deploy.sh" > /dev/null; then
        echo "‚ùå Mot de passe par d√©faut 'admin123' trouv√© dans le code"
        exit 1
    fi

    # V√©rifier les variables d'environnement critiques
    if [ -z "$SECRET_KEY" ] && [ "$ENVIRONMENT" = "production" ]; then
        echo "‚ùå SECRET_KEY manquante pour l'environnement de production"
        echo "   D√©finissez SECRET_KEY avant le d√©ploiement"
        exit 1
    fi

    echo "‚úÖ Validation r√©ussie"
}

# G√©n√©rer une cl√© secr√®te si n√©cessaire (seulement pour d√©veloppement)
if [ -z "$SECRET_KEY" ] && [ "$ENVIRONMENT" != "production" ]; then
    SECRET_KEY=$(python3 -c "import secrets; print(secrets.token_urlsafe(32))")
    echo "üîë Cl√© secr√®te g√©n√©r√©e pour d√©veloppement: $SECRET_KEY"
    echo "   ‚ö†Ô∏è  N'utilisez PAS cette cl√© en production!"
fi

# Ex√©cuter la validation
validate_deployment

# Commit et push
echo "üì¶ Pr√©paration du commit..."
git add .

# V√©rifier s'il y a des changements √† committer
if git diff --cached --quiet; then
    echo "‚ÑπÔ∏è  Aucun changement √† committer"
else
    git commit -m "Deploy: $(date +'%Y-%m-%d %H:%M:%S') - Phase 1 security improvements"
fi

echo "üöÄ Push vers GitHub (d√©clenche le d√©ploiement automatique)..."
git push origin main

echo "‚úÖ D√©ploiement valid√© et initi√©!"
echo "üîç Surveillez le d√©ploiement sur votre plateforme d'h√©bergement"
echo "üìù Variables d'environnement √† configurer en production:"
echo "   - SECRET_KEY (obligatoire)"
echo "   - FRONTEND_URL (recommand√©)"
echo "   - ENVIRONMENT=production"
