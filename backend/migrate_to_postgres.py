#!/usr/bin/env python3
"""
Migration script: SQLite ‚Üí PostgreSQL

Script de migration s√©curis√© des donn√©es depuis SQLite vers PostgreSQL.
Peut √™tre utilis√© pour :
- Migrer les donn√©es existantes
- Valider que tout fonctionne
- Faire un backup avant migration

Usage:
    python migrate_to_postgres.py
    
Configuration:
    1. Configurer DATABASE_URL_SOURCE et DATABASE_URL_TARGET ci-dessous
    2. Ou utiliser les variables d'environnement
    3. Ex√©cuter le script
"""

import asyncio
import os
import sys
from datetime import datetime
from typing import Any

from sqlalchemy import inspect, text, delete
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from app.models import Base, User, Category, Expense, Translation


# Configuration des bases de donn√©es
DATABASE_URL_SOURCE = os.getenv(
    "DATABASE_URL_SOURCE",
    "sqlite+aiosqlite:///./expense.db"
)

DATABASE_URL_TARGET = os.getenv(
    "DATABASE_URL_TARGET",
    "postgresql+asyncpg://notbroke_user:password@localhost:5432/notbroke_db"
)


class MigrationManager:
    """G√®re la migration des donn√©es d'une base √† l'autre."""
    
    def __init__(self, source_url: str, target_url: str):
        self.source_url = source_url
        self.target_url = target_url
        self.source_engine = None
        self.target_engine = None
        self.source_session_maker = None
        self.target_session_maker = None
        self.stats = {
            "users": 0,
            "categories": 0,
            "expenses": 0,
            "translations": 0,
        }
    
    async def setup(self) -> None:
        """Initialiser les connexions aux bases de donn√©es."""
        print("üîå Connexion aux bases de donn√©es...")
        
        try:
            # Source (SQLite)
            self.source_engine = create_async_engine(
                self.source_url,
                echo=False,
                connect_args={"check_same_thread": False} if "sqlite" in self.source_url else {}
            )
            self.source_session_maker = async_sessionmaker(self.source_engine)
            
            # Test connexion source
            async with self.source_engine.begin() as conn:
                await conn.execute(text("SELECT 1"))
            print("  ‚úÖ SQLite connect√©")
            
            # Target (PostgreSQL)
            self.target_engine = create_async_engine(
                self.target_url,
                echo=False,
            )
            self.target_session_maker = async_sessionmaker(self.target_engine)
            
            # Test connexion target
            async with self.target_engine.begin() as conn:
                await conn.execute(text("SELECT 1"))
            print("  ‚úÖ PostgreSQL connect√©")
            
        except Exception as e:
            print(f"  ‚ùå Erreur de connexion: {e}")
            raise
    
    async def create_target_schema(self) -> None:
        """Cr√©er le sch√©ma dans la base de donn√©es cible."""
        print("\nüìã Cr√©ation du sch√©ma PostgreSQL...")
        
        try:
            async with self.target_engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)
            print("  ‚úÖ Sch√©ma cr√©√©")
        except Exception as e:
            print(f"  ‚ùå Erreur: {e}")
            raise
    
    async def cleanup_target_data(self) -> None:
        """Nettoyer les donn√©es existantes dans la base cible."""
        print("\nüßπ Nettoyage des donn√©es existantes...")
        
        try:
            async with self.target_session_maker() as session:
                # Ordre important: respecter les contraintes de cl√©s √©trang√®res
                await session.execute(delete(Expense))
                await session.execute(delete(Translation))
                await session.execute(delete(Category))
                await session.execute(delete(User))
                await session.commit()
                print("  ‚úÖ Donn√©es nettoy√©es")
        except Exception as e:
            print(f"  ‚ÑπÔ∏è  Aucune donn√©e √† nettoyer (base vide): {e}")
    
    async def migrate_users(self) -> None:
        """Migrer les utilisateurs."""
        print("\nüë• Migration des utilisateurs...")
        
        async with self.source_session_maker() as source_session:
            source_users = (await source_session.execute(
                __import__("sqlalchemy").select(User)
            )).scalars().all()
            
            if not source_users:
                print("  ‚ÑπÔ∏è  Aucun utilisateur √† migrer")
                return
            
            async with self.target_session_maker() as target_session:
                for user in source_users:
                    try:
                        new_user = User(
                            id=user.id,
                            username=user.username,
                            email=user.email,
                            hashed_password=user.hashed_password,
                            is_active=user.is_active,
                            created_at=user.created_at,
                        )
                        target_session.add(new_user)
                        self.stats["users"] += 1
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è  Erreur pour utilisateur {user.username}: {e}")
                
                await target_session.commit()
                print(f"  ‚úÖ {self.stats['users']} utilisateur(s) migr√©(s)")
    
    async def migrate_categories(self) -> None:
        """Migrer les cat√©gories."""
        print("\nüìÇ Migration des cat√©gories...")
        
        async with self.source_session_maker() as source_session:
            source_categories = (await source_session.execute(
                __import__("sqlalchemy").select(Category)
            )).scalars().all()
            
            if not source_categories:
                print("  ‚ÑπÔ∏è  Aucune cat√©gorie √† migrer")
                return
            
            async with self.target_session_maker() as target_session:
                for category in source_categories:
                    try:
                        new_category = Category(
                            id=category.id,
                            name=category.name,
                            description=category.description,
                            parent_id=category.parent_id,
                            user_id=category.user_id,
                        )
                        target_session.add(new_category)
                        self.stats["categories"] += 1
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è  Erreur pour cat√©gorie {category.name}: {e}")
                
                await target_session.commit()
                print(f"  ‚úÖ {self.stats['categories']} cat√©gorie(s) migr√©e(s)")
    
    async def migrate_expenses(self) -> None:
        """Migrer les d√©penses."""
        print("\nüí∞ Migration des d√©penses...")
        
        async with self.source_session_maker() as source_session:
            source_expenses = (await source_session.execute(
                __import__("sqlalchemy").select(Expense)
            )).scalars().all()
            
            if not source_expenses:
                print("  ‚ÑπÔ∏è  Aucune d√©pense √† migrer")
                return
            
            async with self.target_session_maker() as target_session:
                for expense in source_expenses:
                    try:
                        new_expense = Expense(
                            id=expense.id,
                            category_id=expense.category_id,
                            amount=expense.amount,
                            note=expense.note,
                            created_at=expense.created_at,
                            user_id=expense.user_id,
                        )
                        target_session.add(new_expense)
                        self.stats["expenses"] += 1
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è  Erreur pour d√©pense: {e}")
                
                await target_session.commit()
                print(f"  ‚úÖ {self.stats['expenses']} d√©pense(s) migr√©e(s)")
    
    async def migrate_translations(self) -> None:
        """Migrer les traductions."""
        print("\nüåê Migration des traductions...")
        
        async with self.source_session_maker() as source_session:
            source_translations = (await source_session.execute(
                __import__("sqlalchemy").select(Translation)
            )).scalars().all()
            
            if not source_translations:
                print("  ‚ÑπÔ∏è  Aucune traduction √† migrer")
                return
            
            async with self.target_session_maker() as target_session:
                for translation in source_translations:
                    try:
                        # V√©rifier si la traduction existe d√©j√†
                        existing = await target_session.execute(
                            __import__("sqlalchemy").select(Translation).where(
                                Translation.id == translation.id
                            )
                        )
                        if existing.scalar():
                            # Traduction existe, la mettre √† jour
                            existing_trans = existing.scalar()
                            existing_trans.locale = translation.locale
                            existing_trans.key = translation.key
                            existing_trans.value = translation.value
                        else:
                            # Nouvelle traduction
                            new_translation = Translation(
                                id=translation.id,
                                locale=translation.locale,
                                key=translation.key,
                                value=translation.value,
                            )
                            target_session.add(new_translation)
                        self.stats["translations"] += 1
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è  Erreur pour traduction id {translation.id}: {e}")
                
                await target_session.commit()
                print(f"  ‚úÖ {self.stats['translations']} traduction(s) migr√©e(s)")
    
    async def verify_migration(self) -> bool:
        """V√©rifier l'int√©grit√© de la migration."""
        print("\n‚úîÔ∏è  V√©rification de la migration...")
        
        try:
            async with self.target_session_maker() as session:
                users_count = (await session.execute(
                    __import__("sqlalchemy").select(__import__("sqlalchemy").func.count(User.id))
                )).scalar() or 0
                
                categories_count = (await session.execute(
                    __import__("sqlalchemy").select(__import__("sqlalchemy").func.count(Category.id))
                )).scalar() or 0
                
                expenses_count = (await session.execute(
                    __import__("sqlalchemy").select(__import__("sqlalchemy").func.count(Expense.id))
                )).scalar() or 0
                
                translations_count = (await session.execute(
                    __import__("sqlalchemy").select(__import__("sqlalchemy").func.count(Translation.id))
                )).scalar() or 0
                
                print(f"  üìä R√©sultats PostgreSQL:")
                print(f"    - Utilisateurs: {users_count}")
                print(f"    - Cat√©gories: {categories_count}")
                print(f"    - D√©penses: {expenses_count}")
                print(f"    - Traductions: {translations_count}")
                
                # V√©rifier la coh√©rence
                if users_count == self.stats["users"] and \
                   categories_count == self.stats["categories"] and \
                   expenses_count == self.stats["expenses"] and \
                   translations_count == self.stats["translations"]:
                    print("  ‚úÖ V√©rification r√©ussie - Les donn√©es sont intactes!")
                    return True
                else:
                    print("  ‚ö†Ô∏è  Attention: Nombre de lignes diff√©rent")
                    return False
                
        except Exception as e:
            print(f"  ‚ùå Erreur de v√©rification: {e}")
            return False
    
    async def cleanup(self) -> None:
        """Fermer les connexions."""
        if self.source_engine:
            await self.source_engine.dispose()
        if self.target_engine:
            await self.target_engine.dispose()


async def main() -> None:
    """Ex√©cuter la migration compl√®te."""
    print("=" * 70)
    print("üöÄ MIGRATION SQLite ‚Üí PostgreSQL")
    print("=" * 70)
    print(f"Source: {DATABASE_URL_SOURCE}")
    print(f"Target: {DATABASE_URL_TARGET}")
    print("=" * 70)
    
    migration = MigrationManager(DATABASE_URL_SOURCE, DATABASE_URL_TARGET)
    
    try:
        # Setup
        await migration.setup()
        
        # Cr√©er le sch√©ma
        await migration.create_target_schema()
        await migration.cleanup_target_data() # Nettoyer les donn√©es existantes
        
        # Migrer les donn√©es
        await migration.migrate_users()
        await migration.migrate_categories()
        await migration.migrate_expenses()
        await migration.migrate_translations()
        
        # V√©rifier
        success = await migration.verify_migration()
        
        # R√©sum√©
        print("\n" + "=" * 70)
        print("üìã R√âSUM√â DE LA MIGRATION")
        print("=" * 70)
        print(f"Utilisateurs:     {migration.stats['users']:>5}")
        print(f"Cat√©gories:       {migration.stats['categories']:>5}")
        print(f"D√©penses:         {migration.stats['expenses']:>5}")
        print(f"Traductions:      {migration.stats['translations']:>5}")
        print("=" * 70)
        
        if success:
            print("\n‚úÖ Migration r√©ussie!")
            print("\nüìù Prochaines √©tapes:")
            print("  1. Mettre √† jour DATABASE_URL dans votre .env")
            print("  2. Tester l'application")
            print("  3. D√©ployer sur Render/VPS")
            sys.exit(0)
        else:
            print("\n‚ö†Ô∏è  Migration compl√©t√©e mais avec avertissements")
            sys.exit(1)
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la migration: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
    finally:
        await migration.cleanup()


if __name__ == "__main__":
    asyncio.run(main())
