#!/usr/bin/env python3
"""Script de migration manuelle pour Render - Ajoute la colonne currency aux expenses"""

import asyncio
import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire backend au path
backend_dir = Path(__file__).parent
sys.path.insert(0, str(backend_dir))

from alembic import command
from alembic.config import Config
from app.config import config as app_config
from app.database import engine
from sqlalchemy import text

async def check_currency_column():
    """V√©rifier si la colonne currency existe."""
    async with engine.begin() as conn:
        result = await conn.execute(
            text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name='expenses' AND column_name='currency'
            """)
        )
        row = result.first()
        return row is not None

async def run_migration():
    """Ex√©cuter la migration Alembic."""
    print("üîÑ V√©rification de l'√©tat de la base de donn√©es...")
    
    # V√©rifier si la colonne existe d√©j√†
    column_exists = await check_currency_column()
    
    if column_exists:
        print("‚úÖ La colonne 'currency' existe d√©j√† dans la table 'expenses'")
        return 0
    
    print("‚ö†Ô∏è  La colonne 'currency' n'existe pas. Ex√©cution de la migration...")
    
    # Configurer Alembic
    alembic_cfg = Config(str(backend_dir / "alembic.ini"))
    
    # V√©rifier la version actuelle
    print("\nüìã Version actuelle des migrations:")
    try:
        command.current(alembic_cfg)
    except Exception as e:
        print(f"‚ö†Ô∏è  Impossible de r√©cup√©rer la version actuelle: {e}")
    
    # Ex√©cuter la migration
    print("\nüöÄ Ex√©cution de la migration 'add_currency_to_expenses'...")
    try:
        command.upgrade(alembic_cfg, "head")
        print("‚úÖ Migration appliqu√©e avec succ√®s!")
        
        # V√©rifier que la colonne existe maintenant
        column_exists = await check_currency_column()
        if column_exists:
            print("‚úÖ V√©rification: La colonne 'currency' existe maintenant")
            return 0
        else:
            print("‚ùå Erreur: La colonne 'currency' n'existe toujours pas apr√®s la migration")
            return 1
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la migration: {e}")
        import traceback
        traceback.print_exc()
        return 1

async def main():
    """Point d'entr√©e principal."""
    print("=" * 70)
    print("üîß SCRIPT DE MIGRATION - Ajout de la colonne currency")
    print("=" * 70)
    print(f"Base de donn√©es: {app_config.get('DATABASE_URL', 'Non configur√©e').split('@')[1] if '@' in app_config.get('DATABASE_URL', '') else 'Non configur√©e'}")
    print("=" * 70)
    
    exit_code = await run_migration()
    
    print("\n" + "=" * 70)
    if exit_code == 0:
        print("‚úÖ Migration termin√©e avec succ√®s!")
    else:
        print("‚ùå Migration √©chou√©e. V√©rifiez les logs ci-dessus.")
    print("=" * 70)
    
    return exit_code

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)

