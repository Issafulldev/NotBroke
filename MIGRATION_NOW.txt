╔════════════════════════════════════════════════════════════════════════════╗
║                                                                            ║
║           🚀 NOTBROKE - MIGRATION POSTGRESQL - À EXÉCUTER MAINTENANT 🚀    ║
║                                                                            ║
╚════════════════════════════════════════════════════════════════════════════╝


✨ TOUT EST PRÊT! VOICI COMMENT FINIR LA MIGRATION:


🎯 OPTION 1: SCRIPT AUTOMATISÉ (Recommandé - 10 minutes)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

   $ chmod +x MIGRATION_FINAL.sh
   $ ./MIGRATION_FINAL.sh

   Ce script va:
   ✓ Vérifier Python et venv
   ✓ Vérifier tous les fichiers
   ✓ Vous proposer des options
   ✓ Exécuter la migration


🎯 OPTION 2: SETUP MANUEL (Si vous préférez contrôler)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

   Étape 1: Installer PostgreSQL (macOS ou Linux)
   
   macOS:
   $ brew install postgresql@15
   $ brew services start postgresql@15
   
   Linux:
   $ sudo apt install postgresql postgresql-contrib
   $ sudo systemctl start postgresql
   
   
   Étape 2: Créer la base de données
   
   $ psql postgres
   > CREATE USER notbroke_user WITH PASSWORD 'notbroke_password';
   > CREATE DATABASE notbroke_db OWNER notbroke_user;
   > \q
   
   
   Étape 3: Configurer le venv et les dépendances
   
   $ cd backend
   $ source venv/bin/activate  (ou venv\Scripts\activate sur Windows)
   $ pip install -r requirements.txt
   
   
   Étape 4: Créer le fichier .env
   
   $ cat > .env << 'EOF'
   DATABASE_URL=postgresql+asyncpg://notbroke_user:notbroke_password@localhost:5432/notbroke_db
   ENVIRONMENT=development
   FRONTEND_URL=http://localhost:3000
   SECRET_KEY=dev_secret_key_change_in_production
   EOF
   
   
   Étape 5: Initialiser la base de données
   
   $ python -c "from app.database import init_db; import asyncio; asyncio.run(init_db())"
   
   
   Étape 6: Si vous avez des données en SQLite, migrez-les
   
   $ python migrate_to_postgres.py
   
   (Sinon, skip cette étape)


🎯 OPTION 3: SETUP AUTO-INSTALLER (macOS/Linux seulement)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

   $ cd backend
   $ chmod +x setup-postgres.sh
   $ ./setup-postgres.sh

   Ce script automatisera les étapes 1-4 ci-dessus


✅ APRÈS LA MIGRATION: TESTER L'APPLICATION
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

   Terminal 1 (Backend):
   $ cd backend && source venv/bin/activate
   $ uvicorn app.main:app --reload
   
   Terminal 2 (Frontend):
   $ cd frontend
   $ npm run dev
   
   Terminal 3 (Ouvrir le navigateur):
   $ open http://localhost:3000
   
   Tester:
   [ ] Voir la page de login
   [ ] S'inscrire
   [ ] Se connecter
   [ ] Créer une catégorie
   [ ] Ajouter une dépense
   [ ] Voir les données
   [ ] Exporter en CSV/XLSX


📊 SI VOUS AVEZ DES DONNÉES EN SQLITE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

   Après avoir configuré PostgreSQL:
   
   $ cd backend && source venv/bin/activate
   $ python migrate_to_postgres.py
   
   Le script affichera:
   ✓ Nombre d'utilisateurs migrés
   ✓ Nombre de catégories migrées
   ✓ Nombre de dépenses migrées
   ✓ Nombre de traductions migrées
   
   Puis affichera un résumé de validation


🐛 SI QUELQUE CHOSE NE FONCTIONNE PAS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

   1. Vérifiez PostgreSQL est lancé:
      macOS: brew services list
      Linux: sudo systemctl status postgresql
   
   2. Vérifiez la connection string:
      echo $DATABASE_URL
   
   3. Consultez le Troubleshooting:
      POSTGRESQL_SETUP_GUIDE.md (section "En cas de problème")
   
   4. Vérifiez les logs:
      journalctl -u notbroke-backend (VPS)
      SQLALCHEMY_ECHO=1 uvicorn app.main:app (Local - pour SQL debug)


🚀 APRÈS LE TEST: COMMIT ET PUSH
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

   $ git add .
   $ git commit -m "feat: PostgreSQL migration complete"
   $ git push origin main


🌐 PRÊT POUR LE DÉPLOIEMENT?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

   Consultez: MIGRATION_POSTGRESQL.md
   
   Pour Render:
   - Section "Déploiement sur Render"
   
   Pour VPS Hostinger:
   - Section "Déploiement sur VPS Hostinger"


📚 DOCUMENTATION DE RÉFÉRENCE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

   • START_HERE.txt .................. Point de départ
   • POSTGRESQL_INDEX.md ............ Index de navigation
   • POSTGRESQL_SETUP_GUIDE.md ...... Quick start + Troubleshooting
   • MIGRATION_POSTGRESQL.md ........ Guide complet (30+ pages)
   • POSTGRESQL_MIGRATION_SUMMARY.md  Vue d'ensemble technique
   • MIGRATION_FINAL.sh ............. Script interactif (recommandé)


💡 CONSEIL
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

   Si vous avez peu de temps:
   → Utilisez MIGRATION_FINAL.sh (automatisé)
   
   Si vous avez du temps et voulez comprendre:
   → Lisez POSTGRESQL_SETUP_GUIDE.md (expliqué étape par étape)
   
   Si vous déployez bientôt:
   → Lisez MIGRATION_POSTGRESQL.md (guide complet)


════════════════════════════════════════════════════════════════════════════════

                    🎯 PRÊT À COMMENCER? 🎯
                    
                  Exécutez: ./MIGRATION_FINAL.sh
                  
                    OU lisez POSTGRESQL_SETUP_GUIDE.md
                    
                    BONNE CHANCE! 🚀

════════════════════════════════════════════════════════════════════════════════

Questions? Réponses: POSTGRESQL_INDEX.md (section "FAQ")
